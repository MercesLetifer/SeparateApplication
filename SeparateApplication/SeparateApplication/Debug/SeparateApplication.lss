
SeparateApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00802000  00802000  000006f8  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006a8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cd  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000043e  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00001278  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000382  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
   6:	00 00       	nop
   8:	de c1       	rjmp	.+956    	; 0x3c6 <__vector_2>
   a:	00 00       	nop
   c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
   e:	00 00       	nop
  10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
  12:	00 00       	nop
  14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
  16:	00 00       	nop
  18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
  22:	00 00       	nop
  24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
  26:	00 00       	nop
  28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f7 c0       	rjmp	.+494    	; 0x220 <__bad_interrupt>
  32:	00 00       	nop
  34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c0       	rjmp	.+488    	; 0x222 <__vector_14>
  3a:	00 00       	nop
  3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
  42:	00 00       	nop
  44:	ed c0       	rjmp	.+474    	; 0x220 <__bad_interrupt>
  46:	00 00       	nop
  48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
  4e:	00 00       	nop
  50:	0b c1       	rjmp	.+534    	; 0x268 <__vector_20>
  52:	00 00       	nop
  54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
  56:	00 00       	nop
  58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
  5e:	00 00       	nop
  60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
  62:	00 00       	nop
  64:	dd c0       	rjmp	.+442    	; 0x220 <__bad_interrupt>
  66:	00 00       	nop
  68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
  72:	00 00       	nop
  74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
  76:	00 00       	nop
  78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
  7e:	00 00       	nop
  80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
  82:	00 00       	nop
  84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
  86:	00 00       	nop
  88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
  92:	00 00       	nop
  94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
  96:	00 00       	nop
  98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c5 c1       	rjmp	.+906    	; 0x438 <__vector_43>
  ae:	00 00       	nop
  b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3e c1       	rjmp	.+636    	; 0x33a <__vector_47>
  be:	00 00       	nop
  c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	55 c1       	rjmp	.+682    	; 0x380 <__vector_53>
  d6:	00 00       	nop
  d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
  de:	00 00       	nop
  e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	9d c0       	rjmp	.+314    	; 0x220 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9b c0       	rjmp	.+310    	; 0x220 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	99 c0       	rjmp	.+306    	; 0x220 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	97 c0       	rjmp	.+302    	; 0x220 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	95 c0       	rjmp	.+298    	; 0x220 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	93 c0       	rjmp	.+294    	; 0x220 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	91 c0       	rjmp	.+290    	; 0x220 <__bad_interrupt>
  fe:	00 00       	nop
 100:	8f c0       	rjmp	.+286    	; 0x220 <__bad_interrupt>
 102:	00 00       	nop
 104:	8d c0       	rjmp	.+282    	; 0x220 <__bad_interrupt>
 106:	00 00       	nop
 108:	8b c0       	rjmp	.+278    	; 0x220 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	89 c0       	rjmp	.+274    	; 0x220 <__bad_interrupt>
 10e:	00 00       	nop
 110:	87 c0       	rjmp	.+270    	; 0x220 <__bad_interrupt>
 112:	00 00       	nop
 114:	85 c0       	rjmp	.+266    	; 0x220 <__bad_interrupt>
 116:	00 00       	nop
 118:	83 c0       	rjmp	.+262    	; 0x220 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	81 c0       	rjmp	.+258    	; 0x220 <__bad_interrupt>
 11e:	00 00       	nop
 120:	7f c0       	rjmp	.+254    	; 0x220 <__bad_interrupt>
 122:	00 00       	nop
 124:	7d c0       	rjmp	.+250    	; 0x220 <__bad_interrupt>
 126:	00 00       	nop
 128:	7b c0       	rjmp	.+246    	; 0x220 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	79 c0       	rjmp	.+242    	; 0x220 <__bad_interrupt>
 12e:	00 00       	nop
 130:	77 c0       	rjmp	.+238    	; 0x220 <__bad_interrupt>
 132:	00 00       	nop
 134:	bc c0       	rjmp	.+376    	; 0x2ae <__vector_77>
 136:	00 00       	nop
 138:	73 c0       	rjmp	.+230    	; 0x220 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	71 c0       	rjmp	.+226    	; 0x220 <__bad_interrupt>
 13e:	00 00       	nop
 140:	6f c0       	rjmp	.+222    	; 0x220 <__bad_interrupt>
 142:	00 00       	nop
 144:	6d c0       	rjmp	.+218    	; 0x220 <__bad_interrupt>
 146:	00 00       	nop
 148:	6b c0       	rjmp	.+214    	; 0x220 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	d3 c0       	rjmp	.+422    	; 0x2f4 <__vector_83>
 14e:	00 00       	nop
 150:	67 c0       	rjmp	.+206    	; 0x220 <__bad_interrupt>
 152:	00 00       	nop
 154:	65 c0       	rjmp	.+202    	; 0x220 <__bad_interrupt>
 156:	00 00       	nop
 158:	63 c0       	rjmp	.+198    	; 0x220 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	61 c0       	rjmp	.+194    	; 0x220 <__bad_interrupt>
 15e:	00 00       	nop
 160:	5f c0       	rjmp	.+190    	; 0x220 <__bad_interrupt>
 162:	00 00       	nop
 164:	5d c0       	rjmp	.+186    	; 0x220 <__bad_interrupt>
 166:	00 00       	nop
 168:	5b c0       	rjmp	.+182    	; 0x220 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	59 c0       	rjmp	.+178    	; 0x220 <__bad_interrupt>
 16e:	00 00       	nop
 170:	57 c0       	rjmp	.+174    	; 0x220 <__bad_interrupt>
 172:	00 00       	nop
 174:	55 c0       	rjmp	.+170    	; 0x220 <__bad_interrupt>
 176:	00 00       	nop
 178:	53 c0       	rjmp	.+166    	; 0x220 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	51 c0       	rjmp	.+162    	; 0x220 <__bad_interrupt>
 17e:	00 00       	nop
 180:	4f c0       	rjmp	.+158    	; 0x220 <__bad_interrupt>
 182:	00 00       	nop
 184:	4d c0       	rjmp	.+154    	; 0x220 <__bad_interrupt>
 186:	00 00       	nop
 188:	4b c0       	rjmp	.+150    	; 0x220 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	49 c0       	rjmp	.+146    	; 0x220 <__bad_interrupt>
 18e:	00 00       	nop
 190:	47 c0       	rjmp	.+142    	; 0x220 <__bad_interrupt>
 192:	00 00       	nop
 194:	45 c0       	rjmp	.+138    	; 0x220 <__bad_interrupt>
 196:	00 00       	nop
 198:	43 c0       	rjmp	.+134    	; 0x220 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	41 c0       	rjmp	.+130    	; 0x220 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	3f c0       	rjmp	.+126    	; 0x220 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	3d c0       	rjmp	.+122    	; 0x220 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3b c0       	rjmp	.+118    	; 0x220 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	39 c0       	rjmp	.+114    	; 0x220 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	7c c1       	rjmp	.+760    	; 0x4aa <__vector_108>
 1b2:	00 00       	nop
 1b4:	35 c0       	rjmp	.+106    	; 0x220 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	33 c0       	rjmp	.+102    	; 0x220 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	31 c0       	rjmp	.+98     	; 0x220 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	2f c0       	rjmp	.+94     	; 0x220 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	2d c0       	rjmp	.+90     	; 0x220 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2b c0       	rjmp	.+86     	; 0x220 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	29 c0       	rjmp	.+82     	; 0x220 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	25 c0       	rjmp	.+74     	; 0x220 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	21 c0       	rjmp	.+66     	; 0x220 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	1f c0       	rjmp	.+62     	; 0x220 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a4 30       	cpi	r26, 0x04	; 4
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	24 d2       	rcall	.+1096   	; 0x666 <main>
 21e:	30 c2       	rjmp	.+1120   	; 0x680 <_exit>

00000220 <__bad_interrupt>:
 220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <__vector_14>:

//------------------------------------
// Interrupt handlers
//------------------------------------
ISR(TCC0_OVF_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	08 b6       	in	r0, 0x38	; 56
 22e:	0f 92       	push	r0
 230:	18 be       	out	0x38, r1	; 56
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	1b be       	out	0x3b, r1	; 59
 238:	8f 93       	push	r24
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	cli();
 23e:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT1);
 240:	e4 e0       	ldi	r30, 0x04	; 4
 242:	f7 e0       	ldi	r31, 0x07	; 7
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
	PORTJ_OUT &= ~(1 << TST_PIN_CNT1);
 24a:	80 81       	ld	r24, Z
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	80 83       	st	Z, r24
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	8f 91       	pop	r24
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	08 be       	out	0x38, r0	; 56
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_20>:

ISR(TCC1_OVF_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	08 b6       	in	r0, 0x38	; 56
 274:	0f 92       	push	r0
 276:	18 be       	out	0x38, r1	; 56
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	1b be       	out	0x3b, r1	; 59
 27e:	8f 93       	push	r24
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	cli();
 284:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT2);
 286:	e4 e0       	ldi	r30, 0x04	; 4
 288:	f7 e0       	ldi	r31, 0x07	; 7
 28a:	80 81       	ld	r24, Z
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	80 83       	st	Z, r24
	PORTJ_OUT |= (1 << TST_PIN_CNT2);
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	80 83       	st	Z, r24
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	08 be       	out	0x38, r0	; 56
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_77>:

ISR(TCD0_OVF_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	08 b6       	in	r0, 0x38	; 56
 2ba:	0f 92       	push	r0
 2bc:	18 be       	out	0x38, r1	; 56
 2be:	0b b6       	in	r0, 0x3b	; 59
 2c0:	0f 92       	push	r0
 2c2:	1b be       	out	0x3b, r1	; 59
 2c4:	8f 93       	push	r24
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	cli();
 2ca:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT3);
 2cc:	e4 e0       	ldi	r30, 0x04	; 4
 2ce:	f7 e0       	ldi	r31, 0x07	; 7
 2d0:	80 81       	ld	r24, Z
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	80 83       	st	Z, r24
	PORTJ_OUT &= ~(1 << TST_PIN_CNT3);
 2d6:	80 81       	ld	r24, Z
 2d8:	8b 7f       	andi	r24, 0xFB	; 251
 2da:	80 83       	st	Z, r24
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0b be       	out	0x3b, r0	; 59
 2e6:	0f 90       	pop	r0
 2e8:	08 be       	out	0x38, r0	; 56
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_83>:

ISR(TCD1_OVF_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	08 b6       	in	r0, 0x38	; 56
 300:	0f 92       	push	r0
 302:	18 be       	out	0x38, r1	; 56
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	1b be       	out	0x3b, r1	; 59
 30a:	8f 93       	push	r24
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	cli();
 310:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT4);
 312:	e4 e0       	ldi	r30, 0x04	; 4
 314:	f7 e0       	ldi	r31, 0x07	; 7
 316:	80 81       	ld	r24, Z
 318:	88 60       	ori	r24, 0x08	; 8
 31a:	80 83       	st	Z, r24
	PORTJ_OUT &= ~(1 << TST_PIN_CNT4);
 31c:	80 81       	ld	r24, Z
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	80 83       	st	Z, r24
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	08 be       	out	0x38, r0	; 56
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_47>:

ISR(TCE0_OVF_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	08 b6       	in	r0, 0x38	; 56
 346:	0f 92       	push	r0
 348:	18 be       	out	0x38, r1	; 56
 34a:	0b b6       	in	r0, 0x3b	; 59
 34c:	0f 92       	push	r0
 34e:	1b be       	out	0x3b, r1	; 59
 350:	8f 93       	push	r24
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	cli();
 356:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT5);
 358:	e4 e0       	ldi	r30, 0x04	; 4
 35a:	f7 e0       	ldi	r31, 0x07	; 7
 35c:	80 81       	ld	r24, Z
 35e:	80 61       	ori	r24, 0x10	; 16
 360:	80 83       	st	Z, r24
	PORTJ_OUT &= ~(1 << TST_PIN_CNT5);
 362:	80 81       	ld	r24, Z
 364:	8f 7e       	andi	r24, 0xEF	; 239
 366:	80 83       	st	Z, r24
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0b be       	out	0x3b, r0	; 59
 372:	0f 90       	pop	r0
 374:	08 be       	out	0x38, r0	; 56
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_53>:

ISR(TCE1_OVF_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	08 b6       	in	r0, 0x38	; 56
 38c:	0f 92       	push	r0
 38e:	18 be       	out	0x38, r1	; 56
 390:	0b b6       	in	r0, 0x3b	; 59
 392:	0f 92       	push	r0
 394:	1b be       	out	0x3b, r1	; 59
 396:	8f 93       	push	r24
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	cli();
 39c:	f8 94       	cli
	PORTJ_OUT |= (1 << TST_PIN_CNT6);
 39e:	e4 e0       	ldi	r30, 0x04	; 4
 3a0:	f7 e0       	ldi	r31, 0x07	; 7
 3a2:	80 81       	ld	r24, Z
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	80 83       	st	Z, r24
	PORTJ_OUT &= ~(1 << TST_PIN_CNT6);
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	80 83       	st	Z, r24
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0b be       	out	0x3b, r0	; 59
 3b8:	0f 90       	pop	r0
 3ba:	08 be       	out	0x38, r0	; 56
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_2>:

ISR(PORTC_INT0_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	08 b6       	in	r0, 0x38	; 56
 3d2:	0f 92       	push	r0
 3d4:	18 be       	out	0x38, r1	; 56
 3d6:	0b b6       	in	r0, 0x3b	; 59
 3d8:	0f 92       	push	r0
 3da:	1b be       	out	0x3b, r1	; 59
 3dc:	2f 93       	push	r18
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	cli();
 3e6:	f8 94       	cli
	if(counter1 == PER_COUNTER7)
 3e8:	80 91 02 20 	lds	r24, 0x2002
 3ec:	90 91 03 20 	lds	r25, 0x2003
 3f0:	87 3e       	cpi	r24, 0xE7	; 231
 3f2:	23 e0       	ldi	r18, 0x03	; 3
 3f4:	92 07       	cpc	r25, r18
 3f6:	69 f4       	brne	.+26     	; 0x412 <__vector_2+0x4c>
	{
		counter1 = 0;
 3f8:	10 92 02 20 	sts	0x2002, r1
 3fc:	10 92 03 20 	sts	0x2003, r1
		PORTJ_OUT |= (1 << TST_PIN_CNT7);
 400:	e4 e0       	ldi	r30, 0x04	; 4
 402:	f7 e0       	ldi	r31, 0x07	; 7
 404:	80 81       	ld	r24, Z
 406:	80 64       	ori	r24, 0x40	; 64
 408:	80 83       	st	Z, r24
		PORTJ_OUT &= ~(1 << TST_PIN_CNT7);
 40a:	80 81       	ld	r24, Z
 40c:	8f 7b       	andi	r24, 0xBF	; 191
 40e:	80 83       	st	Z, r24
 410:	05 c0       	rjmp	.+10     	; 0x41c <__vector_2+0x56>
	}
	else
	{
		++counter1;
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	80 93 02 20 	sts	0x2002, r24
 418:	90 93 03 20 	sts	0x2003, r25
	}
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0b be       	out	0x3b, r0	; 59
 42a:	0f 90       	pop	r0
 42c:	08 be       	out	0x38, r0	; 56
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_43>:

ISR(PORTE_INT0_vect)
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	08 b6       	in	r0, 0x38	; 56
 444:	0f 92       	push	r0
 446:	18 be       	out	0x38, r1	; 56
 448:	0b b6       	in	r0, 0x3b	; 59
 44a:	0f 92       	push	r0
 44c:	1b be       	out	0x3b, r1	; 59
 44e:	2f 93       	push	r18
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
	cli();
 458:	f8 94       	cli
	if(counter2 == PER_COUNTER8)
 45a:	80 91 00 20 	lds	r24, 0x2000
 45e:	90 91 01 20 	lds	r25, 0x2001
 462:	87 3e       	cpi	r24, 0xE7	; 231
 464:	23 e0       	ldi	r18, 0x03	; 3
 466:	92 07       	cpc	r25, r18
 468:	69 f4       	brne	.+26     	; 0x484 <__vector_43+0x4c>
	{
		counter2 = 0;
 46a:	10 92 00 20 	sts	0x2000, r1
 46e:	10 92 01 20 	sts	0x2001, r1
		PORTJ_OUT |= (1 << TST_PIN_CNT8);
 472:	e4 e0       	ldi	r30, 0x04	; 4
 474:	f7 e0       	ldi	r31, 0x07	; 7
 476:	80 81       	ld	r24, Z
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	80 83       	st	Z, r24
		PORTJ_OUT &= ~(1 << TST_PIN_CNT8);
 47c:	80 81       	ld	r24, Z
 47e:	8f 77       	andi	r24, 0x7F	; 127
 480:	80 83       	st	Z, r24
 482:	05 c0       	rjmp	.+10     	; 0x48e <__vector_43+0x56>
	}
	else
	{
		++counter2;
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	80 93 00 20 	sts	0x2000, r24
 48a:	90 93 01 20 	sts	0x2001, r25
	}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0b be       	out	0x3b, r0	; 59
 49c:	0f 90       	pop	r0
 49e:	08 be       	out	0x38, r0	; 56
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__vector_108>:

ISR(TCF0_OVF_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	08 b6       	in	r0, 0x38	; 56
 4b6:	0f 92       	push	r0
 4b8:	18 be       	out	0x38, r1	; 56
 4ba:	0b b6       	in	r0, 0x3b	; 59
 4bc:	0f 92       	push	r0
 4be:	1b be       	out	0x3b, r1	; 59
 4c0:	8f 93       	push	r24
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	cli();
 4c6:	f8 94       	cli
	PORTK_OUT |= (1 << TST_PIN_QDEC);
 4c8:	e4 e2       	ldi	r30, 0x24	; 36
 4ca:	f7 e0       	ldi	r31, 0x07	; 7
 4cc:	80 81       	ld	r24, Z
 4ce:	81 60       	ori	r24, 0x01	; 1
 4d0:	80 83       	st	Z, r24
	PORTK_OUT &= ~(1 << TST_PIN_QDEC);
 4d2:	80 81       	ld	r24, Z
 4d4:	8e 7f       	andi	r24, 0xFE	; 254
 4d6:	80 83       	st	Z, r24
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	8f 91       	pop	r24
 4de:	0f 90       	pop	r0
 4e0:	0b be       	out	0x3b, r0	; 59
 4e2:	0f 90       	pop	r0
 4e4:	08 be       	out	0x38, r0	; 56
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <Initialize>:
//-------------------------------------
void Initialize()
{
	//---------------Detector Initialization-----------------------
	// Pins direction: input
	PORTC_DIR &= ~((1 << D1_CH1) | (1 << D1_CH2) | (1 << D1_CH4));
 4f0:	e0 e4       	ldi	r30, 0x40	; 64
 4f2:	f6 e0       	ldi	r31, 0x06	; 6
 4f4:	80 81       	ld	r24, Z
 4f6:	8a 7e       	andi	r24, 0xEA	; 234
 4f8:	80 83       	st	Z, r24
	PORTD_DIR &= ~((1 << D1_CH3) | (1 << D2_CH1));
 4fa:	e0 e6       	ldi	r30, 0x60	; 96
 4fc:	f6 e0       	ldi	r31, 0x06	; 6
 4fe:	80 81       	ld	r24, Z
 500:	8e 7e       	andi	r24, 0xEE	; 238
 502:	80 83       	st	Z, r24
	PORTE_DIR &= ~((1 << D2_CH2) | (1 << D2_CH3) | (1 << D2_CH4));
 504:	e0 e8       	ldi	r30, 0x80	; 128
 506:	f6 e0       	ldi	r31, 0x06	; 6
 508:	80 81       	ld	r24, Z
 50a:	8a 7e       	andi	r24, 0xEA	; 234
 50c:	80 83       	st	Z, r24
	
	// Sense configuration: rising
	PORTC_PIN0CTRL = PORT_ISC_RISING_gc;
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	20 93 50 06 	sts	0x0650, r18
	PORTC_PIN2CTRL = PORT_ISC_RISING_gc;
 514:	20 93 52 06 	sts	0x0652, r18
	PORTC_PIN4CTRL = PORT_ISC_RISING_gc;
 518:	20 93 54 06 	sts	0x0654, r18
	PORTD_PIN0CTRL = PORT_ISC_RISING_gc;
 51c:	20 93 70 06 	sts	0x0670, r18
	PORTD_PIN4CTRL = PORT_ISC_RISING_gc;
 520:	20 93 74 06 	sts	0x0674, r18
	PORTE_PIN0CTRL = PORT_ISC_RISING_gc;
 524:	20 93 90 06 	sts	0x0690, r18
	PORTE_PIN2CTRL = PORT_ISC_RISING_gc;
 528:	20 93 92 06 	sts	0x0692, r18
	PORTE_PIN4CTRL = PORT_ISC_RISING_gc;
 52c:	20 93 94 06 	sts	0x0694, r18
	
	// Set event multiplexers
	EVSYS_CH2MUX = EVSYS_CHMUX_PORTC_PIN0_gc;
 530:	80 e6       	ldi	r24, 0x60	; 96
 532:	80 93 82 01 	sts	0x0182, r24
	EVSYS_CH3MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
 536:	84 e6       	ldi	r24, 0x64	; 100
 538:	80 93 83 01 	sts	0x0183, r24
	EVSYS_CH4MUX = EVSYS_CHMUX_PORTD_PIN0_gc;
 53c:	88 e6       	ldi	r24, 0x68	; 104
 53e:	80 93 84 01 	sts	0x0184, r24
	EVSYS_CH5MUX = EVSYS_CHMUX_PORTD_PIN4_gc;
 542:	8c e6       	ldi	r24, 0x6C	; 108
 544:	80 93 85 01 	sts	0x0185, r24
	EVSYS_CH6MUX = EVSYS_CHMUX_PORTE_PIN0_gc;
 548:	80 e7       	ldi	r24, 0x70	; 112
 54a:	80 93 86 01 	sts	0x0186, r24
	EVSYS_CH7MUX = EVSYS_CHMUX_PORTE_PIN4_gc;
 54e:	84 e7       	ldi	r24, 0x74	; 116
 550:	80 93 87 01 	sts	0x0187, r24
	
	// Enable filtering on events
	EVSYS_CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 554:	10 92 8a 01 	sts	0x018A, r1
	EVSYS_CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 558:	10 92 8b 01 	sts	0x018B, r1
	EVSYS_CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 55c:	10 92 8c 01 	sts	0x018C, r1
	EVSYS_CH5CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 560:	10 92 8d 01 	sts	0x018D, r1
	EVSYS_CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 564:	10 92 8e 01 	sts	0x018E, r1
	EVSYS_CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 568:	10 92 8f 01 	sts	0x018F, r1
	
	// Set the period of counters(edge)
	TCC0_PER = PER_COUNTER1;
 56c:	87 ee       	ldi	r24, 0xE7	; 231
 56e:	93 e0       	ldi	r25, 0x03	; 3
 570:	80 93 26 08 	sts	0x0826, r24
 574:	90 93 27 08 	sts	0x0827, r25
	TCC1_PER = PER_COUNTER2;
 578:	80 93 66 08 	sts	0x0866, r24
 57c:	90 93 67 08 	sts	0x0867, r25
	TCD0_PER = PER_COUNTER3;
 580:	80 93 26 09 	sts	0x0926, r24
 584:	90 93 27 09 	sts	0x0927, r25
	TCD1_PER = PER_COUNTER4;
 588:	80 93 66 09 	sts	0x0966, r24
 58c:	90 93 67 09 	sts	0x0967, r25
	TCE0_PER = PER_COUNTER5;
 590:	80 93 26 0a 	sts	0x0A26, r24
 594:	90 93 27 0a 	sts	0x0A27, r25
	TCE1_PER = PER_COUNTER6;
 598:	80 93 66 0a 	sts	0x0A66, r24
 59c:	90 93 67 0a 	sts	0x0A67, r25
	
	// Select event channel as clock source for timers
	TCC0_CTRLA = TC_CLKSEL_EVCH2_gc;
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	80 93 00 08 	sts	0x0800, r24
	TCC1_CTRLA = TC_CLKSEL_EVCH3_gc;
 5a6:	8b e0       	ldi	r24, 0x0B	; 11
 5a8:	80 93 40 08 	sts	0x0840, r24
	TCD0_CTRLA = TC_CLKSEL_EVCH4_gc;
 5ac:	8c e0       	ldi	r24, 0x0C	; 12
 5ae:	80 93 00 09 	sts	0x0900, r24
	TCD1_CTRLA = TC_CLKSEL_EVCH5_gc;
 5b2:	8d e0       	ldi	r24, 0x0D	; 13
 5b4:	80 93 40 09 	sts	0x0940, r24
	TCE0_CTRLA = TC_CLKSEL_EVCH6_gc;
 5b8:	8e e0       	ldi	r24, 0x0E	; 14
 5ba:	80 93 00 0a 	sts	0x0A00, r24
	TCE1_CTRLA = TC_CLKSEL_EVCH7_gc;
 5be:	8f e0       	ldi	r24, 0x0F	; 15
 5c0:	80 93 40 0a 	sts	0x0A40, r24
	
	// Set interrupt masks
	PORTC_INT0MASK = (1 << D1_CH4);
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	80 93 4a 06 	sts	0x064A, r24
	PORTE_INT0MASK = (1 << D2_CH4);
 5ca:	80 93 8a 06 	sts	0x068A, r24
	
	// Enable port interrupt
	PORTC_INTCTRL |= PORT_INT0LVL_HI_gc;
 5ce:	e9 e4       	ldi	r30, 0x49	; 73
 5d0:	f6 e0       	ldi	r31, 0x06	; 6
 5d2:	80 81       	ld	r24, Z
 5d4:	83 60       	ori	r24, 0x03	; 3
 5d6:	80 83       	st	Z, r24
	PORTE_INTCTRL |= PORT_INT0LVL_HI_gc;
 5d8:	e9 e8       	ldi	r30, 0x89	; 137
 5da:	f6 e0       	ldi	r31, 0x06	; 6
 5dc:	80 81       	ld	r24, Z
 5de:	83 60       	ori	r24, 0x03	; 3
 5e0:	80 83       	st	Z, r24
	
	
	//---------------Motor initialization-----------------------
	// Pins direction: input
	PORTF_DIR &= ~((1 << ENCD_A) | (1 << ENCD_B) | (1 << ENCD_Z));
 5e2:	e0 ea       	ldi	r30, 0xA0	; 160
 5e4:	f6 e0       	ldi	r31, 0x06	; 6
 5e6:	80 81       	ld	r24, Z
 5e8:	8a 7e       	andi	r24, 0xEA	; 234
 5ea:	80 83       	st	Z, r24
	
	// Sense configuration
	PORTF_PIN0CTRL = PORT_ISC_LEVEL_gc;
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	80 93 b0 06 	sts	0x06B0, r24
	PORTF_PIN2CTRL = PORT_ISC_LEVEL_gc;
 5f2:	80 93 b2 06 	sts	0x06B2, r24
	PORTF_PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
 5f6:	10 92 b4 06 	sts	0x06B4, r1
	
	// Select ENCD_A as multiplexer input for event channel 0
	EVSYS_CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
 5fa:	88 e7       	ldi	r24, 0x78	; 120
 5fc:	80 93 80 01 	sts	0x0180, r24
	EVSYS_CH1MUX = EVSYS_CHMUX_PORTF_PIN4_gc;
 600:	8c e7       	ldi	r24, 0x7C	; 124
 602:	80 93 81 01 	sts	0x0181, r24
	
	// Set the  Quadrature Index Enable bit in event channel 0
	EVSYS_CH0CTRL |= (1 << EVSYS_QDIEN_bp);
 606:	e8 e8       	ldi	r30, 0x88	; 136
 608:	f1 e0       	ldi	r31, 0x01	; 1
 60a:	80 81       	ld	r24, Z
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	80 83       	st	Z, r24
	
	// Select the Index Recognition mode for event channel 0
	EVSYS_CH0CTRL |= EVSYS_QDIRM_gp;						// set, after testing
 610:	80 81       	ld	r24, Z
 612:	85 60       	ori	r24, 0x05	; 5
 614:	80 83       	st	Z, r24
	
	//  Enable quadrature decoding and digital filtering in event channel 0
	EVSYS_CH0CTRL |= (1 << EVSYS_QDEN_bp);
 616:	80 81       	ld	r24, Z
 618:	88 60       	ori	r24, 0x08	; 8
 61a:	80 83       	st	Z, r24
	
	// Set Quadrature decoding as event action for timer
	TCF0_CTRLD |= TC_EVACT_QDEC_gc;
 61c:	e3 e0       	ldi	r30, 0x03	; 3
 61e:	fb e0       	ldi	r31, 0x0B	; 11
 620:	80 81       	ld	r24, Z
 622:	80 66       	ori	r24, 0x60	; 96
 624:	80 83       	st	Z, r24
	
	// Select event channel 0 as event source for timer
	TCF0_CTRLD |= TC_EVSEL_CH0_gc;
 626:	80 81       	ld	r24, Z
 628:	88 60       	ori	r24, 0x08	; 8
 62a:	80 83       	st	Z, r24
	
	// Set the period register of timer (n * 4 - 1)
	TCF0_PER = (ENCD_LINE_COUNT * 4 - 1);
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	9c e7       	ldi	r25, 0x7C	; 124
 630:	80 93 26 0b 	sts	0x0B26, r24
 634:	90 93 27 0b 	sts	0x0B27, r25
	
	// Enable timer by setting CLKSEL to a CLKSEL_DIV1
	TCF0_CTRLA = TC_CLKSEL_DIV1_gc;
 638:	20 93 00 0b 	sts	0x0B00, r18
	
	// Enable overflow interrupt of timer
	TCF0_INTCTRLA |= TC_OVFINTLVL_HI_gc;
 63c:	e6 e0       	ldi	r30, 0x06	; 6
 63e:	fb e0       	ldi	r31, 0x0B	; 11
 640:	80 81       	ld	r24, Z
 642:	83 60       	ori	r24, 0x03	; 3
 644:	80 83       	st	Z, r24
	
	
	//---------------Interrupt initialization-----------------------
	// Enable high level interrupt
	PMIC_CTRL |= (1 << PMIC_HILVLEN_bp);
 646:	e2 ea       	ldi	r30, 0xA2	; 162
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	84 60       	ori	r24, 0x04	; 4
 64e:	80 83       	st	Z, r24
	
	//---------------Initialization for tests-----------------------
	// Pin direction: output
	PORTJ_DIR |= (1 << TST_PIN_CNT1) | (1 << TST_PIN_CNT2) | (1 << TST_PIN_CNT3) | (1 << TST_PIN_CNT4)
 650:	e0 e0       	ldi	r30, 0x00	; 0
 652:	f7 e0       	ldi	r31, 0x07	; 7
 654:	80 81       	ld	r24, Z
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	80 83       	st	Z, r24
	| (1 << TST_PIN_CNT5) | (1 << TST_PIN_CNT6) | (1 << TST_PIN_CNT7) | (1 << TST_PIN_CNT8);
	PORTK_DIR |= (1 << TST_PIN_QDEC);
 65a:	e0 e2       	ldi	r30, 0x20	; 32
 65c:	f7 e0       	ldi	r31, 0x07	; 7
 65e:	80 81       	ld	r24, Z
 660:	81 60       	ori	r24, 0x01	; 1
 662:	80 83       	st	Z, r24
 664:	08 95       	ret

00000666 <main>:

//------------------------------------
// Entry point
//------------------------------------
int main(void)
{
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	1f 92       	push	r1
 66c:	1f 92       	push	r1
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
	Initialize();
 672:	3e df       	rcall	.-388    	; 0x4f0 <Initialize>
	sei();
 674:	78 94       	sei
	
	volatile int i = 0;
 676:	19 82       	std	Y+1, r1	; 0x01
 678:	1a 82       	std	Y+2, r1	; 0x02
	
    while(1)
    {
        //TODO:: Please write your application code 
		if (i > 10)
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
 67e:	fd cf       	rjmp	.-6      	; 0x67a <main+0x14>

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
