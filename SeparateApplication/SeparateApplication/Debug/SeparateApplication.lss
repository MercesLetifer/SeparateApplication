
SeparateApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000005e6  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a4  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000296  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00001249  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__bad_interrupt>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
   a:	00 00       	nop
   c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
   e:	00 00       	nop
  10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
  12:	00 00       	nop
  14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
  16:	00 00       	nop
  18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f7 c0       	rjmp	.+494    	; 0x210 <__bad_interrupt>
  22:	00 00       	nop
  24:	f5 c0       	rjmp	.+490    	; 0x210 <__bad_interrupt>
  26:	00 00       	nop
  28:	f3 c0       	rjmp	.+486    	; 0x210 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f1 c0       	rjmp	.+482    	; 0x210 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ef c0       	rjmp	.+478    	; 0x210 <__bad_interrupt>
  32:	00 00       	nop
  34:	ed c0       	rjmp	.+474    	; 0x210 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c0       	rjmp	.+470    	; 0x210 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c0       	rjmp	.+454    	; 0x210 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e1 c0       	rjmp	.+450    	; 0x210 <__bad_interrupt>
  4e:	00 00       	nop
  50:	df c0       	rjmp	.+446    	; 0x210 <__bad_interrupt>
  52:	00 00       	nop
  54:	dd c0       	rjmp	.+442    	; 0x210 <__bad_interrupt>
  56:	00 00       	nop
  58:	db c0       	rjmp	.+438    	; 0x210 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d9 c0       	rjmp	.+434    	; 0x210 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d7 c0       	rjmp	.+430    	; 0x210 <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c0       	rjmp	.+426    	; 0x210 <__bad_interrupt>
  66:	00 00       	nop
  68:	d3 c0       	rjmp	.+422    	; 0x210 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d1 c0       	rjmp	.+418    	; 0x210 <__bad_interrupt>
  6e:	00 00       	nop
  70:	cf c0       	rjmp	.+414    	; 0x210 <__bad_interrupt>
  72:	00 00       	nop
  74:	cd c0       	rjmp	.+410    	; 0x210 <__bad_interrupt>
  76:	00 00       	nop
  78:	cb c0       	rjmp	.+406    	; 0x210 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c9 c0       	rjmp	.+402    	; 0x210 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c7 c0       	rjmp	.+398    	; 0x210 <__bad_interrupt>
  82:	00 00       	nop
  84:	c5 c0       	rjmp	.+394    	; 0x210 <__bad_interrupt>
  86:	00 00       	nop
  88:	c3 c0       	rjmp	.+390    	; 0x210 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 c0       	rjmp	.+386    	; 0x210 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bf c0       	rjmp	.+382    	; 0x210 <__bad_interrupt>
  92:	00 00       	nop
  94:	bd c0       	rjmp	.+378    	; 0x210 <__bad_interrupt>
  96:	00 00       	nop
  98:	bb c0       	rjmp	.+374    	; 0x210 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b9 c0       	rjmp	.+370    	; 0x210 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b7 c0       	rjmp	.+366    	; 0x210 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b5 c0       	rjmp	.+362    	; 0x210 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b3 c0       	rjmp	.+358    	; 0x210 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b1 c0       	rjmp	.+354    	; 0x210 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	af c0       	rjmp	.+350    	; 0x210 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ad c0       	rjmp	.+346    	; 0x210 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ab c0       	rjmp	.+342    	; 0x210 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a9 c0       	rjmp	.+338    	; 0x210 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a7 c0       	rjmp	.+334    	; 0x210 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a3 c0       	rjmp	.+326    	; 0x210 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c0       	rjmp	.+322    	; 0x210 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9f c0       	rjmp	.+318    	; 0x210 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9d c0       	rjmp	.+314    	; 0x210 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9b c0       	rjmp	.+310    	; 0x210 <__bad_interrupt>
  da:	00 00       	nop
  dc:	99 c0       	rjmp	.+306    	; 0x210 <__bad_interrupt>
  de:	00 00       	nop
  e0:	97 c0       	rjmp	.+302    	; 0x210 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	95 c0       	rjmp	.+298    	; 0x210 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	93 c0       	rjmp	.+294    	; 0x210 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	91 c0       	rjmp	.+290    	; 0x210 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8f c0       	rjmp	.+286    	; 0x210 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8d c0       	rjmp	.+282    	; 0x210 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8b c0       	rjmp	.+278    	; 0x210 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	89 c0       	rjmp	.+274    	; 0x210 <__bad_interrupt>
  fe:	00 00       	nop
 100:	87 c0       	rjmp	.+270    	; 0x210 <__bad_interrupt>
 102:	00 00       	nop
 104:	85 c0       	rjmp	.+266    	; 0x210 <__bad_interrupt>
 106:	00 00       	nop
 108:	83 c0       	rjmp	.+262    	; 0x210 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	81 c0       	rjmp	.+258    	; 0x210 <__bad_interrupt>
 10e:	00 00       	nop
 110:	7f c0       	rjmp	.+254    	; 0x210 <__bad_interrupt>
 112:	00 00       	nop
 114:	7d c0       	rjmp	.+250    	; 0x210 <__bad_interrupt>
 116:	00 00       	nop
 118:	7b c0       	rjmp	.+246    	; 0x210 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	79 c0       	rjmp	.+242    	; 0x210 <__bad_interrupt>
 11e:	00 00       	nop
 120:	77 c0       	rjmp	.+238    	; 0x210 <__bad_interrupt>
 122:	00 00       	nop
 124:	75 c0       	rjmp	.+234    	; 0x210 <__bad_interrupt>
 126:	00 00       	nop
 128:	73 c0       	rjmp	.+230    	; 0x210 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	71 c0       	rjmp	.+226    	; 0x210 <__bad_interrupt>
 12e:	00 00       	nop
 130:	6f c0       	rjmp	.+222    	; 0x210 <__bad_interrupt>
 132:	00 00       	nop
 134:	6d c0       	rjmp	.+218    	; 0x210 <__bad_interrupt>
 136:	00 00       	nop
 138:	6b c0       	rjmp	.+214    	; 0x210 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	69 c0       	rjmp	.+210    	; 0x210 <__bad_interrupt>
 13e:	00 00       	nop
 140:	67 c0       	rjmp	.+206    	; 0x210 <__bad_interrupt>
 142:	00 00       	nop
 144:	65 c0       	rjmp	.+202    	; 0x210 <__bad_interrupt>
 146:	00 00       	nop
 148:	63 c0       	rjmp	.+198    	; 0x210 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	61 c0       	rjmp	.+194    	; 0x210 <__bad_interrupt>
 14e:	00 00       	nop
 150:	5f c0       	rjmp	.+190    	; 0x210 <__bad_interrupt>
 152:	00 00       	nop
 154:	5d c0       	rjmp	.+186    	; 0x210 <__bad_interrupt>
 156:	00 00       	nop
 158:	5b c0       	rjmp	.+182    	; 0x210 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	59 c0       	rjmp	.+178    	; 0x210 <__bad_interrupt>
 15e:	00 00       	nop
 160:	57 c0       	rjmp	.+174    	; 0x210 <__bad_interrupt>
 162:	00 00       	nop
 164:	55 c0       	rjmp	.+170    	; 0x210 <__bad_interrupt>
 166:	00 00       	nop
 168:	53 c0       	rjmp	.+166    	; 0x210 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	51 c0       	rjmp	.+162    	; 0x210 <__bad_interrupt>
 16e:	00 00       	nop
 170:	4f c0       	rjmp	.+158    	; 0x210 <__bad_interrupt>
 172:	00 00       	nop
 174:	4d c0       	rjmp	.+154    	; 0x210 <__bad_interrupt>
 176:	00 00       	nop
 178:	4b c0       	rjmp	.+150    	; 0x210 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	49 c0       	rjmp	.+146    	; 0x210 <__bad_interrupt>
 17e:	00 00       	nop
 180:	47 c0       	rjmp	.+142    	; 0x210 <__bad_interrupt>
 182:	00 00       	nop
 184:	45 c0       	rjmp	.+138    	; 0x210 <__bad_interrupt>
 186:	00 00       	nop
 188:	43 c0       	rjmp	.+134    	; 0x210 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__bad_interrupt>
 18e:	00 00       	nop
 190:	3f c0       	rjmp	.+126    	; 0x210 <__bad_interrupt>
 192:	00 00       	nop
 194:	3d c0       	rjmp	.+122    	; 0x210 <__bad_interrupt>
 196:	00 00       	nop
 198:	3b c0       	rjmp	.+118    	; 0x210 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	39 c0       	rjmp	.+114    	; 0x210 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	37 c0       	rjmp	.+110    	; 0x210 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	33 c0       	rjmp	.+102    	; 0x210 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	31 c0       	rjmp	.+98     	; 0x210 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2d c0       	rjmp	.+90     	; 0x210 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	23 c0       	rjmp	.+70     	; 0x210 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	b3 d0       	rcall	.+358    	; 0x374 <main>
 20e:	be c0       	rjmp	.+380    	; 0x38c <_exit>

00000210 <__bad_interrupt>:
 210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <Initialize>:

void Initialize()
{
	//---------------Detector Initialization-----------------------
	// Ports direction: input
	PORTC_DIR &= ~((1 << D1_CH1) | (1 << D1_CH2) | (1 << D1_CH4));
 212:	e0 e4       	ldi	r30, 0x40	; 64
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	80 81       	ld	r24, Z
 218:	8a 7e       	andi	r24, 0xEA	; 234
 21a:	80 83       	st	Z, r24
	PORTD_DIR &= ~((1 << D1_CH3) | (1 << D2_CH1));
 21c:	e0 e6       	ldi	r30, 0x60	; 96
 21e:	f6 e0       	ldi	r31, 0x06	; 6
 220:	80 81       	ld	r24, Z
 222:	8e 7e       	andi	r24, 0xEE	; 238
 224:	80 83       	st	Z, r24
	PORTE_DIR &= ~((1 << D2_CH2) | (1 << D2_CH3) | (1 << D2_CH4));
 226:	e0 e8       	ldi	r30, 0x80	; 128
 228:	f6 e0       	ldi	r31, 0x06	; 6
 22a:	80 81       	ld	r24, Z
 22c:	8a 7e       	andi	r24, 0xEA	; 234
 22e:	80 83       	st	Z, r24
	
	// Sense configuration: rising
	PORTC_PIN0CTRL = PORT_ISC_RISING_gc;
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	20 93 50 06 	sts	0x0650, r18
	PORTC_PIN2CTRL = PORT_ISC_RISING_gc;
 236:	20 93 52 06 	sts	0x0652, r18
	PORTC_PIN4CTRL = PORT_ISC_RISING_gc;
 23a:	20 93 54 06 	sts	0x0654, r18
	PORTD_PIN0CTRL = PORT_ISC_RISING_gc;
 23e:	20 93 70 06 	sts	0x0670, r18
	PORTD_PIN4CTRL = PORT_ISC_RISING_gc;
 242:	20 93 74 06 	sts	0x0674, r18
	PORTE_PIN0CTRL = PORT_ISC_RISING_gc;
 246:	20 93 90 06 	sts	0x0690, r18
	PORTE_PIN2CTRL = PORT_ISC_RISING_gc;
 24a:	20 93 92 06 	sts	0x0692, r18
	PORTE_PIN4CTRL = PORT_ISC_RISING_gc;
 24e:	20 93 94 06 	sts	0x0694, r18
	
	// Set event multiplexers
	EVSYS_CH2MUX = EVSYS_CHMUX_PORTC_PIN0_gc;
 252:	80 e6       	ldi	r24, 0x60	; 96
 254:	80 93 82 01 	sts	0x0182, r24
	EVSYS_CH3MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	80 93 83 01 	sts	0x0183, r24
	EVSYS_CH4MUX = EVSYS_CHMUX_PORTD_PIN0_gc;
 25e:	88 e6       	ldi	r24, 0x68	; 104
 260:	80 93 84 01 	sts	0x0184, r24
	EVSYS_CH5MUX = EVSYS_CHMUX_PORTD_PIN4_gc;
 264:	8c e6       	ldi	r24, 0x6C	; 108
 266:	80 93 85 01 	sts	0x0185, r24
	EVSYS_CH6MUX = EVSYS_CHMUX_PORTE_PIN0_gc;
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	80 93 86 01 	sts	0x0186, r24
	EVSYS_CH7MUX = EVSYS_CHMUX_PORTE_PIN4_gc;
 270:	84 e7       	ldi	r24, 0x74	; 116
 272:	80 93 87 01 	sts	0x0187, r24
	
	// Enable filtering on events
	EVSYS_CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 276:	10 92 8a 01 	sts	0x018A, r1
	EVSYS_CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 27a:	10 92 8b 01 	sts	0x018B, r1
	EVSYS_CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 27e:	10 92 8c 01 	sts	0x018C, r1
	EVSYS_CH5CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 282:	10 92 8d 01 	sts	0x018D, r1
	EVSYS_CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 286:	10 92 8e 01 	sts	0x018E, r1
	EVSYS_CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 28a:	10 92 8f 01 	sts	0x018F, r1
	
	// Set the period of counters(edge)
	TCC0_PER = 0xFFFF;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	80 93 26 08 	sts	0x0826, r24
 296:	90 93 27 08 	sts	0x0827, r25
	TCC1_PER = 0xFFFF;
 29a:	80 93 66 08 	sts	0x0866, r24
 29e:	90 93 67 08 	sts	0x0867, r25
	TCD0_PER = 0xFFFF;
 2a2:	80 93 26 09 	sts	0x0926, r24
 2a6:	90 93 27 09 	sts	0x0927, r25
	TCD1_PER = 0xFFFF;
 2aa:	80 93 66 09 	sts	0x0966, r24
 2ae:	90 93 67 09 	sts	0x0967, r25
	TCE0_PER = 0xFFFF;
 2b2:	80 93 26 0a 	sts	0x0A26, r24
 2b6:	90 93 27 0a 	sts	0x0A27, r25
	TCE1_PER = 0xFFFF;
 2ba:	80 93 66 0a 	sts	0x0A66, r24
 2be:	90 93 67 0a 	sts	0x0A67, r25
	
	// Select event channel as clock source for timers
	TCC0_CTRLA = TC_CLKSEL_EVCH2_gc;
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	80 93 00 08 	sts	0x0800, r24
	TCC1_CTRLA = TC_CLKSEL_EVCH3_gc;
 2c8:	8b e0       	ldi	r24, 0x0B	; 11
 2ca:	80 93 40 08 	sts	0x0840, r24
	TCD0_CTRLA = TC_CLKSEL_EVCH4_gc;
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
 2d0:	80 93 00 09 	sts	0x0900, r24
	TCD1_CTRLA = TC_CLKSEL_EVCH5_gc;
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	80 93 40 09 	sts	0x0940, r24
	TCE0_CTRLA = TC_CLKSEL_EVCH6_gc;
 2da:	8e e0       	ldi	r24, 0x0E	; 14
 2dc:	80 93 00 0a 	sts	0x0A00, r24
	TCE1_CTRLA = TC_CLKSEL_EVCH7_gc;
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	80 93 40 0a 	sts	0x0A40, r24
	
	// Set interrupt masks
	PORTC_INT0MASK = (1 << D1_CH4);
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	80 93 4a 06 	sts	0x064A, r24
	PORTE_INT0MASK = (1 << D2_CH4);
 2ec:	80 93 8a 06 	sts	0x068A, r24
	
	// Enable port interrupt
	PORTC_INTCTRL |= PORT_INT0LVL_HI_gc;
 2f0:	e9 e4       	ldi	r30, 0x49	; 73
 2f2:	f6 e0       	ldi	r31, 0x06	; 6
 2f4:	80 81       	ld	r24, Z
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	80 83       	st	Z, r24
	PORTE_INTCTRL |= PORT_INT0LVL_HI_gc;
 2fa:	e9 e8       	ldi	r30, 0x89	; 137
 2fc:	f6 e0       	ldi	r31, 0x06	; 6
 2fe:	80 81       	ld	r24, Z
 300:	83 60       	ori	r24, 0x03	; 3
 302:	80 83       	st	Z, r24
	
	
	//---------------Motor initialization-----------------------
	// Ports direction: input
	PORTF_DIR &= ~((1 << ENCD_A) | (1 << ENCD_B) | (1 << ENCD_Z));
 304:	e0 ea       	ldi	r30, 0xA0	; 160
 306:	f6 e0       	ldi	r31, 0x06	; 6
 308:	80 81       	ld	r24, Z
 30a:	8a 7e       	andi	r24, 0xEA	; 234
 30c:	80 83       	st	Z, r24
	
	// Sense configuration
	PORTF_PIN0CTRL = PORT_ISC_LEVEL_gc;
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	80 93 b0 06 	sts	0x06B0, r24
	PORTF_PIN2CTRL = PORT_ISC_LEVEL_gc;
 314:	80 93 b2 06 	sts	0x06B2, r24
	PORTF_PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
 318:	10 92 b4 06 	sts	0x06B4, r1
	
	// Select ENCD_A as multiplexer input for event channel 0
	EVSYS_CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
 31c:	88 e7       	ldi	r24, 0x78	; 120
 31e:	80 93 80 01 	sts	0x0180, r24
	EVSYS_CH1MUX = EVSYS_CHMUX_PORTF_PIN4_gc;
 322:	8c e7       	ldi	r24, 0x7C	; 124
 324:	80 93 81 01 	sts	0x0181, r24
	
	// Set the  Quadrature Index Enable bit in event channel 0
	EVSYS_CH0CTRL |= (1 << EVSYS_QDIEN_bp);
 328:	e8 e8       	ldi	r30, 0x88	; 136
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	80 81       	ld	r24, Z
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	80 83       	st	Z, r24
	
	// Select the Index Recognition mode for event channel 0
	EVSYS_CH0CTRL |= EVSYS_QDIRM_01_gc;						// set, after testing
 332:	80 81       	ld	r24, Z
 334:	80 62       	ori	r24, 0x20	; 32
 336:	80 83       	st	Z, r24
	
	//  Enable quadrature decoding and digital filtering in event channel 0
	EVSYS_CH0CTRL |= (1 << EVSYS_QDEN_bp);
 338:	80 81       	ld	r24, Z
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	80 83       	st	Z, r24
	
	// Set Quadrature decoding as event action for timer
	TCF0_CTRLD |= TC_EVACT_QDEC_gc;
 33e:	e3 e0       	ldi	r30, 0x03	; 3
 340:	fb e0       	ldi	r31, 0x0B	; 11
 342:	80 81       	ld	r24, Z
 344:	80 66       	ori	r24, 0x60	; 96
 346:	80 83       	st	Z, r24
	
	// Select event channel 0 as event source for timer
	TCF0_CTRLD |= TC_EVSEL_CH0_gc;
 348:	80 81       	ld	r24, Z
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	80 83       	st	Z, r24
	
	// Set the period register of timer (n * 4 - 1)
	TCF0_PER = (ENCD_LINE_COUNT * 4 - 1);
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	9c e7       	ldi	r25, 0x7C	; 124
 352:	80 93 26 0b 	sts	0x0B26, r24
 356:	90 93 27 0b 	sts	0x0B27, r25
	
	// Enable timer by setting CLKSEL to a CLKSEL_DIV1
	TCF0_CTRLA = TC_CLKSEL_DIV1_gc;
 35a:	20 93 00 0b 	sts	0x0B00, r18
	
	// Enable overflow interrupt of timer
	TCF0_INTCTRLA |= TC_OVFINTLVL_HI_gc;
 35e:	e6 e0       	ldi	r30, 0x06	; 6
 360:	fb e0       	ldi	r31, 0x0B	; 11
 362:	80 81       	ld	r24, Z
 364:	83 60       	ori	r24, 0x03	; 3
 366:	80 83       	st	Z, r24
	
	
	//---------------Interrupt initialization-----------------------
	// Enable high level interrupt
	PMIC_CTRL |= (1 << PMIC_HILVLEN_bp);
 368:	e2 ea       	ldi	r30, 0xA2	; 162
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	84 60       	ori	r24, 0x04	; 4
 370:	80 83       	st	Z, r24
 372:	08 95       	ret

00000374 <main>:
// Prototypes
//------------------------------------
void Initialize();

int main(void)
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	1f 92       	push	r1
 37a:	1f 92       	push	r1
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	Initialize();
 380:	48 df       	rcall	.-368    	; 0x212 <Initialize>
	
	volatile int i = 0;
 382:	19 82       	std	Y+1, r1	; 0x01
 384:	1a 82       	std	Y+2, r1	; 0x02
	
    while(1)
    {
        //TODO:: Please write your application code 
		if (i > 10)
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	fd cf       	rjmp	.-6      	; 0x386 <main+0x12>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
